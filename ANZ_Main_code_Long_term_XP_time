
create table india_growth.anz_uber_pass_v1 as 
--------------------
--- Users base for different cohorts (treatments vs control )
----------------------
with xp_users as (
    select 
         '{{campaign_name}}' as campaign_name
        ,name as tag_name 
        ,dy.country_id
        ,case
            when name in ('{{treatment_tag1}}') then 'treatment1'
            when name in ('{{treatment_tag2}}') then 'treatment2'
            when name in ('{{treatment_tag3}}') then 'treatment3'
            when name in ('{{control_tag}}') then 'control'
         end as cohort 
        ,tags.user_uuid as client_uuid
        from raw_etl_data.api_user_tags  as tags
        join dwh.dim_eater dc on tags.user_uuid = dc.eater_uuid   --- referenced freq city id to map to country
        join dwh.dim_city dy on dc.primary_city_id = dy.city_id
        where 1=1 

        and name in ('{{control_tag}}' , '{{treatment_tag1}}', '{{treatment_tag2}}' , '{{treatment_tag3}}')
        and deleted_at is null
        and dy.country_id IN (10,126)
     )



,uber_pass as (

    with cohort_pass as
        (  select
            xp.client_uuid
            , xp.campaign_name
            , xp.cohort
            , xp.tag_name
            ,xp.country_id
          --  , MIN(xp.treatment_group_key) as treatment_group_key
            -- , MIN(xp.begin_effective_timestamp) as begin_effective_timestamp
          --  ,  MIN(first_trip_request_timestamp) as first_trip_request_timestamp
            , CASE WHEN COUNT(DISTINCT s.msg.passuuid) > 0 THEN TRUE ELSE FALSE END as is_pass_purchased
        from
            xp_users xp
        LEFT JOIN
            rawdata.kafka_hp_multipass_pass_purchases_nodedup s
            ON xp.client_uuid=s.msg.rideruuid
            AND s.msg.purchasesuccess = TRUE
            AND s.msg.offertype = 'UberPassOffer'
        --  AND s.msg.appname = 'client'  ---  commented to include purchase on both apps

            -- AND DATE_PARSE(REPLACE(REPLACE(s.msg.purchasetimestamp, 'T', ' '), 'Z', ''), '%Y-%m-%d %H:%i:%s') >= xp.begin_effective_timestamp 
            -- AND DATE_PARSE(REPLACE(REPLACE(s.msg.purchasetimestamp, 'T', ' '), 'Z', ''), '%Y-%m-%d %H:%i:%s') < xp.begin_effective_timestamp + INTERVAL '28' DAY

            AND s.datestr BETWEEN '{{xp_end_date}}' AND '{{xp_end_date}}' + INTERVAL '20' DAY
        GROUP BY
            1,2,3,4,5
        )

        SELECT
                campaign_name
                ,cohort
                ,tag_name
                ,country_id
                ,client_uuid
              --  , COUNT(1) as xp_cohort_user_ct
                , SUM(CASE WHEN is_pass_purchased THEN 1 ELSE 0 END) as pass_purchased_user_ct
               
        from
                cohort_pass
        GROUP BY
                1,2,3,4,5
        )
    
select * from uber_pass 


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------
--- Users base for next 7 days performance for different cohorts (treatments vs control )
start date : 2022-01-19 to 2022-02-20 till 2022-03-12
----------------------

create table india_growth.anz_xp_longterm_v3 as 

with rides_trips as (
        select  xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,count(ft.uuid) as completed_trips
             --   ,count(distinct xp.client_uuid) as riders

              from india_growth.anz_xp_base_v2 xp 
               left join dwh.fact_trip ft 
                on ft.client_uuid = xp.client_uuid
                
                and date(datestr) BETWEEN DATE ('{{xp_date}}') and DATE ('{{xp_end_date}}') + INTERVAL '20' DAY
                and ft.status = 'completed' 
                AND ft.marketplace = 'personal_transport'
                and date(ft.request_timestamp_utc) >= date ('{{xp_date}}')
                group by 1,2,3,4,5,6,7,8
            )

, rides_first_trips as (
        select 
                xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips

                , sum(case when ft.client_uuid is not null and ac.user_uuid is null  then 1 else 0 end) as ft_user_ct
        
     from rides_trips xp 
      left join dwh.fact_trip ft 
        on ft.client_uuid = xp.client_uuid
         and date(datestr) BETWEEN DATE ('{{xp_date}}') and DATE ('{{xp_end_date}}') + INTERVAL '20' DAY
                and ft.status = 'completed' 
                AND ft.marketplace = 'personal_transport'
                and date(ft.request_timestamp_utc) >= date ('{{xp_date}}')
          
        left join dwh.analytics_client as ac 
             on xp.client_uuid = ac.user_uuid
             and date(first_trip_request_timestamp) < date ('{{xp_date}}')
       
     --   where ac.user_uuid is null        
        group by 1,2,3,4,5,6,7,8,9

        )

, trip_kpis as (

    select 
    
               xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips
                ,ft_user_ct

                , sum(gross_bookings_usd ) as gb

        -- , max(cast(operational_date as timestamp)) as max_date_trips
        -- , min(cast(operational_date as timestamp)) as min_date_trips
    
    from rides_first_trips xp 
    left join secure_finance.fds_jobs_rides_op_dt fds 
     
     on xp.client_uuid = fds.client_uuid 

    and fds.status = 'COMPLETED'
    --    and fds.line_of_business in ('TNP','UberPOOL')
        
        and date(operational_date) >= DATE ('{{xp_date}}')
        and date(operational_date) <= DATE ('{{xp_end_date}}') + INTERVAL '20' DAY
    
    group by 1,2,3,4,5,6,7,8,9,10
)

, vc as (

    select
                 xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips
                ,ft_user_ct
                ,gb
        , sum(coalesce(vc_usd, vc_estimated_usd)) as vc
        -- , min(fds.operational_date) as min_date_vc
        -- , max(fds.operational_date) as max_date_vc

    from trip_kpis xp  
    left join secure_finance.fds_rides_vc fds
    on xp.client_uuid = fds.client_uuid 
    
    and fds.status = 'COMPLETED'
   --  and fds.line_of_business in ('TNP','UberPOOL')
        
        and date(operational_date) >= DATE ('{{xp_date}}')
        and date(operational_date) <= DATE ('{{xp_end_date}}') + INTERVAL '20' DAY

    group by 1,2,3,4,5,6,7,8,9,10,11
)

, promo_spend as (

    select 
    
                 b.campaign_name
                ,b.cohort
                ,b.tag_name
                ,b.country_id
                ,b.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips
                ,ft_user_ct
                ,gb
                ,vc
      --  , promotion_category
      --  , count(trip_uuid) as promo_trips  --- don't calculate trips data from here
        , sum(amount_used_usd) as promo_spend
        -- , max(t.begintrip_timestamp_local) as max_date_spend
        -- , min(t.begintrip_timestamp_local) as min_date_spend
    
    from vc b 
       left join dwh.fact_trip t  on b.client_uuid = t.client_uuid 
        and t.status = 'completed'
        and date(t.datestr) >= date ('{{xp_date}}') 
        and date(t.datestr) <= date ('{{xp_end_date}}') + INTERVAL '20' DAY
        
        left join dwh.fact_promo_redeem fpr on fpr.client_uuid = t.client_uuid and t.uuid = fpr.trip_uuid
        and date(fpr.datestr) >= date ('{{xp_date}}') 
        and date(fpr.datestr) <= date ('{{xp_end_date}}') + INTERVAL '20' DAY
        
        left join dwh.dim_promotion dp on dp.promotion_code_uuid = fpr.promotion_code_uuid 
        and date(begintrip_timestamp_local) >= date ('{{xp_date}}')
        and date(begintrip_timestamp_local) < date ('{{xp_end_date}}') + INTERVAL '20' DAY
        and dp.promotion_code in ('AUE2RT1' , 'NZE2RT1' , 'AUE2RT2', 'NZE2RT2', 'AUE2RT3', 'NZE2RT3')
    
    group by 1,2,3,4,5,6,7,8,9,10,11,12
   )
  

,uber_pass as (

    with cohort_pass as
        (  select
                 xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips
                ,ft_user_ct
                ,gb
                ,vc
                ,promo_spend
          --  , MIN(xp.treatment_group_key) as treatment_group_key
            -- , MIN(xp.begin_effective_timestamp) as begin_effective_timestamp
          --  ,  MIN(first_trip_request_timestamp) as first_trip_request_timestamp
            , CASE WHEN COUNT(DISTINCT s.msg.passuuid) > 0 THEN TRUE ELSE FALSE END as is_pass_purchased
        from
           promo_spend xp
        LEFT JOIN
            rawdata.kafka_hp_multipass_pass_purchases_nodedup s
            ON xp.client_uuid=s.msg.rideruuid
            AND s.msg.purchasesuccess = TRUE
            AND s.msg.offertype = 'UberPassOffer'
        --  AND s.msg.appname = 'client'  ---  commented to include purchase on both apps

            -- AND DATE_PARSE(REPLACE(REPLACE(s.msg.purchasetimestamp, 'T', ' '), 'Z', ''), '%Y-%m-%d %H:%i:%s') >= xp.begin_effective_timestamp 
            -- AND DATE_PARSE(REPLACE(REPLACE(s.msg.purchasetimestamp, 'T', ' '), 'Z', ''), '%Y-%m-%d %H:%i:%s') < xp.begin_effective_timestamp + INTERVAL '28' DAY

            AND date(s.datestr) BETWEEN date '{{xp_date}}' AND date '{{xp_end_date}}' + INTERVAL '20' DAY
        GROUP BY
            1,2,3,4,5,6,7,8,9,10,11,12,13
        )

        SELECT
                xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,quarter_freq
                ,lifetime_freq
                ,member
                ,completed_trips
                ,ft_user_ct
                ,gb
                ,vc
                ,promo_spend
              --  , COUNT(1) as xp_cohort_user_ct
                , SUM(CASE WHEN is_pass_purchased THEN 1 ELSE 0 END) as pass_purchased_user_ct
               
        from
                cohort_pass as xp
        GROUP BY
                1,2,3,4,5,6,7,8,9,10,11,12,13
    )

  
, expt_metrics as 

     (          
      select 
                 xp.campaign_name
                ,xp.cohort
                ,xp.tag_name
                ,xp.country_id
                ,xp.client_uuid
                ,xp.quarter_freq
                ,xp.lifetime_freq
                ,xp.member
    --    ,xp.users as cohort_users

        , (case when xp.completed_trips >= 1 then 1 else 0 end) as riders 
        , coalesce(xp.completed_trips,0)completed_trips

        , xp.ft_user_ct
        , coalesce(xp.gb,0)gb
        , coalesce(xp.vc,0) as vc_gb
        , coalesce(xp.promo_spend,0)promo_spend
        , xp.pass_purchased_user_ct

       from uber_pass as xp

    --    left join rides_trips as rt 
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = rt.campaign_name and xp.cohort = rt.cohort  and xp.country_id = rt.country_id

    --    left join rides_first_trips rft 
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = rft.campaign_name and xp.cohort = rft.cohort  and xp.country_id = rft.country_id

    --    left join trip_kpis as tk 
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = tk.campaign_name and xp.cohort = tk.cohort  and xp.country_id = tk.country_id

    --    left join vc as vc 
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = vc.campaign_name and xp.cohort = vc.cohort  and xp.country_id = vc.country_id

    --    left join promo_spend as ps 
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = ps.campaign_name and xp.cohort = ps.cohort  and xp.country_id = ps.country_id

    --    left join uber_pass as up
    --    on xp.client_uuid = rt.client_uuid and xp.campaign_name = up.campaign_name and xp.cohort = up.cohort  and xp.country_id = up.country_id

      )

   select * from expt_metrics 
   
 ---934531


 
------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------- Aggregated code  ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------


with all_cohorts as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

      , count(distinct client_uuid) as cohort_users

      , sum(riders)riders
      , 1*sum(riders) / count(distinct client_uuid) as avg_riders
      , variance(riders)var_riders 

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

    --   , sum(ft_user_ct)ft_user_ct
    --   , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
    --   , variance(ft_user_ct)var_ft_user_ct

      , count(distinct case when ft_user_ct > 0 then client_uuid end )ft_user_ct
      , 1*count(distinct case when ft_user_ct > 0 then client_uuid end ) / count(distinct client_uuid) as avg_ft_user_ct
    --  , variance(count(distinct case when ft_user_ct > 0 then client_uuid end ))var_ft_user_ct


      , sum(gb)gb
      , 1*sum(gb) / count(distinct client_uuid) as avg_gb
      , variance(gb)var_gb

      , sum(vc_gb)vc_gb
      , 1*sum(vc_gb) / count(distinct client_uuid) as avg_vc_gb
      , variance(vc_gb)var_vc_gb

      , sum(promo_spend)promo_spend
      , 1*sum(promo_spend) / count(distinct client_uuid) as avg_promo_spend
      , variance(promo_spend)var_promo_spend

      , sum(pass_purchased_user_ct)pass_purchased_user_ct 


      from india_growth.anz_xp_longterm_v3 
      group by 1,2,3,4,5

    )

 ,quarter_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , quarter_freq as segment

      , count(distinct client_uuid) as cohort_users

      , sum(riders)riders
      , 1*sum(riders) / count(distinct client_uuid) as avg_riders
      , variance(riders)var_riders 

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

    --   , sum(ft_user_ct)ft_user_ct
    --   , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
    --   , variance(ft_user_ct)var_ft_user_ct

      , count(distinct case when ft_user_ct > 0 then client_uuid end )ft_user_ct
      , 1*count(distinct case when ft_user_ct > 0 then client_uuid end ) / count(distinct client_uuid) as avg_ft_user_ct
    --  , variance(count(distinct case when ft_user_ct > 0 then client_uuid end ))var_ft_user_ct

      , sum(gb)gb
      , 1*sum(gb) / count(distinct client_uuid) as avg_gb
      , variance(gb)var_gb

      , sum(vc_gb)vc_gb
      , 1*sum(vc_gb) / count(distinct client_uuid) as avg_vc_gb
      , variance(vc_gb)var_vc_gb

      , sum(promo_spend)promo_spend
      , 1*sum(promo_spend) / count(distinct client_uuid) as avg_promo_spend
      , variance(promo_spend)var_promo_spend

      , sum(pass_purchased_user_ct)pass_purchased_user_ct 


      from india_growth.anz_xp_longterm_v3 
      group by 1,2,3,4,5

    )
 
 ,lifetime_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , lifetime_freq as segment

      , count(distinct client_uuid) as cohort_users

      , sum(riders)riders
      , 1*sum(riders) / count(distinct client_uuid) as avg_riders
      , variance(riders)var_riders 

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

    --   , sum(ft_user_ct)ft_user_ct
    --   , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
    --   , variance(ft_user_ct)var_ft_user_ct

      , count(distinct case when ft_user_ct > 0 then client_uuid end )ft_user_ct
      , 1*count(distinct case when ft_user_ct > 0 then client_uuid end ) / count(distinct client_uuid) as avg_ft_user_ct
    --  , variance(count(distinct case when ft_user_ct > 0 then client_uuid end ))var_ft_user_ct

      , sum(gb)gb
      , 1*sum(gb) / count(distinct client_uuid) as avg_gb
      , variance(gb)var_gb

      , sum(vc_gb)vc_gb
      , 1*sum(vc_gb) / count(distinct client_uuid) as avg_vc_gb
      , variance(vc_gb)var_vc_gb

      , sum(promo_spend)promo_spend
      , 1*sum(promo_spend) / count(distinct client_uuid) as avg_promo_spend
      , variance(promo_spend)var_promo_spend

      , sum(pass_purchased_user_ct)pass_purchased_user_ct 


      from india_growth.anz_xp_longterm_v3 
      group by 1,2,3,4,5

    )

 ,member as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , member as segment

      , count(distinct client_uuid) as cohort_users

      , sum(riders)riders
      , 1*sum(riders) / count(distinct client_uuid) as avg_riders
      , variance(riders)var_riders 

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

    --   , sum(ft_user_ct)ft_user_ct
    --   , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
    --   , variance(ft_user_ct)var_ft_user_ct

      , count(distinct case when ft_user_ct > 0 then client_uuid end )ft_user_ct
      , 1*count(distinct case when ft_user_ct > 0 then client_uuid end ) / count(distinct client_uuid) as avg_ft_user_ct
    --  , variance(count(distinct case when ft_user_ct > 0 then client_uuid end ))var_ft_user_ct

      , sum(gb)gb
      , 1*sum(gb) / count(distinct client_uuid) as avg_gb
      , variance(gb)var_gb

      , sum(vc_gb)vc_gb
      , 1*sum(vc_gb) / count(distinct client_uuid) as avg_vc_gb
      , variance(vc_gb)var_vc_gb

      , sum(promo_spend)promo_spend
      , 1*sum(promo_spend) / count(distinct client_uuid) as avg_promo_spend
      , variance(promo_spend)var_promo_spend

      , sum(pass_purchased_user_ct)pass_purchased_user_ct 


      from india_growth.anz_xp_longterm_v3 
      group by 1,2,3,4,5

    )   

    select * from all_cohorts 
    union all 
    select * from quarter_freq 
    union all
    select * from lifetime_freq 
    union all
    select * from member 



--------------------------------------------------------------------------------------------------------------------------------------------

--- rider sessions for different cohorts (treatments vs control )
----------------------

create table india_growth.anz_xp_ssn_longterm_v2 as 

--------------------
--- rider sessions for different cohorts (treatments vs control )
----------------------

with sessions_rider AS (
     SELECT 
        campaign_name
        ,cohort
        ,tag_name
        ,country_id
        ,client_uuid
        ,xp.quarter_freq
        ,xp.lifetime_freq
        ,xp.member
        ,COUNT(DISTINCT CASE WHEN to_state.vvid_info.selected = TRUE
            OR to_state.vvid_info.eta.last IS NOT NULL
            OR to_state.vvid_info.zero_observed = TRUE
            OR to_state.pd_screen_tag = 'InlineActionSheet' THEN session_id END) AS shopping_sessions

     --   COUNT(DISTINCT CASE WHEN to_state.name = 'REQUEST_RIDE' THEN session_id END) AS requesting_sessions

    FROM marketplace_data.rider_sessions s
    join india_growth.anz_xp_base_v2 xp 
     on s.rider_uuid = xp.client_uuid 
    
    where date(s.datestr) BETWEEN date ('{{xp_date}}') and date ('{{xp_end_date}}') + INTERVAL '20' DAY
    
    GROUP BY 1,2,3,4,5,6,7,8
)

--------------------
--- rider requests for different cohorts (treatments vs control )
----------------------

,requests_rider as (
    SELECT 
        campaign_name
        ,cohort
        ,tag_name
        ,country_id
        ,xp.client_uuid
        ,xp.quarter_freq
        ,xp.lifetime_freq
        ,xp.member
        , count(distinct uuid) as requests
        , count(distinct case when status = 'completed' then uuid end) as completed_rqsts
        
    FROM dwh.fact_trip ft
    join india_growth.anz_xp_base_v2 xp 
     on ft.client_uuid = xp.client_uuid 
    
    -- INNER JOIN
    -- riders su
    -- ON su.client_uuid = ft.client_uuid   

    where DATE(ft.datestr) BETWEEN DATE '{{xp_date}}' AND DATE '{{xp_end_date}}'  + INTERVAL '20' DAY
    AND ft.marketplace='personal_transport' 
    AND status != 'fare_split'
    GROUP BY 1,2,3,4,5,6,7,8

     )


--------------------
--- combining all metrics for different cohorts (treatments vs control )
----------------------

,expt_metrics_2 as 
     (          
      select 
         xp.campaign_name
        ,xp.cohort
        ,xp.tag_name
        ,xp.country_id 
        ,xp.client_uuid
        ,xp.quarter_freq
        ,xp.lifetime_freq
        ,xp.member
    --    ,xp.users as cohort_users
        
        , coalesce(sr.shopping_sessions,0)shopping_sessions
        , coalesce(rr.requests,0)requests
        , coalesce(rr.completed_rqsts,0)completed_sessions
    --    , coalesce(rr.requests / sr.shopping_sessions ,0) r_s_ratio

        from india_growth.anz_xp_base_v2 as xp

        left join sessions_rider as sr
       on xp.client_uuid = sr.client_uuid and xp.campaign_name = sr.campaign_name and xp.cohort = sr.cohort  and xp.country_id = sr.country_id

       left join requests_rider as rr
       on xp.client_uuid = rr.client_uuid and xp.campaign_name = rr.campaign_name and xp.cohort = rr.cohort  and xp.country_id = rr.country_id

      )

    select * from expt_metrics_2 


-- 934531

-- ,agg_2 as
--     (        
--      select 
      
--       campaign_name
--       , cohort
--       , tag_name
--       , country_id

--       , sum(shopping_sessions)shopping_sessions
--       , 1*sum(shopping_sessions) / count(distinct client_uuid) as avg_shopping_sessions
--       , variance(shopping_sessions)var_shopping_sessions

--       , sum(requests)requests
--       , 1*sum(requests) / count(distinct client_uuid) as avg_requests
--       , variance(requests)var_requests

--       , sum(completed_sessions)completed_sessions

--       , 1*sum(r_s_ratio) / count(distinct client_uuid) as avg_r_s_ratio
--       , variance(r_s_ratio)var_r_s_ratio

--       from expt_metrics_2 
--       group by 1,2,3,4
--     )

--     select * from agg_2 



------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------- Aggregated code  ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------

with all_cohorts as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

      , sum(shopping_sessions)shopping_sessions
      , 1*sum(shopping_sessions) / count(distinct client_uuid) as avg_shopping_sessions
      , variance(shopping_sessions)var_shopping_sessions

      , sum(requests)requests
      , 1*sum(requests) / count(distinct client_uuid) as avg_requests
      , variance(requests)var_requests

      , sum(completed_sessions)completed_sessions
      , 1*sum(completed_sessions) / count(distinct client_uuid) as avg_completed_sessions

    --   , 1*sum(r_s_ratio) / count(distinct client_uuid) as avg_r_s_ratio
    --   , variance(r_s_ratio)var_r_s_ratio


      from india_growth.anz_xp_ssn_longterm_v2 
      group by 1,2,3,4,5

    )

 ,quarter_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , quarter_freq as segment

      , sum(shopping_sessions)shopping_sessions
      , 1*sum(shopping_sessions) / count(distinct client_uuid) as avg_shopping_sessions
      , variance(shopping_sessions)var_shopping_sessions

      , sum(requests)requests
      , 1*sum(requests) / count(distinct client_uuid) as avg_requests
      , variance(requests)var_requests

      , sum(completed_sessions)completed_sessions
      , 1*sum(completed_sessions) / count(distinct client_uuid) as avg_completed_sessions

    --   , 1*sum(r_s_ratio) / count(distinct client_uuid) as avg_r_s_ratio
    --   , variance(r_s_ratio)var_r_s_ratio


      from india_growth.anz_xp_ssn_longterm_v2 
      group by 1,2,3,4,5

    )
 
 ,lifetime_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , lifetime_freq as segment

      , sum(shopping_sessions)shopping_sessions
      , 1*sum(shopping_sessions) / count(distinct client_uuid) as avg_shopping_sessions
      , variance(shopping_sessions)var_shopping_sessions

      , sum(requests)requests
      , 1*sum(requests) / count(distinct client_uuid) as avg_requests
      , variance(requests)var_requests

      , sum(completed_sessions)completed_sessions
      , 1*sum(completed_sessions) / count(distinct client_uuid) as avg_completed_sessions

    --   , 1*sum(r_s_ratio) / count(distinct client_uuid) as avg_r_s_ratio
    --   , variance(r_s_ratio)var_r_s_ratio

      from india_growth.anz_xp_ssn_longterm_v2 
      group by 1,2,3,4,5

    )

,member as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , member as segment

      , sum(shopping_sessions)shopping_sessions
      , 1*sum(shopping_sessions) / count(distinct client_uuid) as avg_shopping_sessions
      , variance(shopping_sessions)var_shopping_sessions

      , sum(requests)requests
      , 1*sum(requests) / count(distinct client_uuid) as avg_requests
      , variance(requests)var_requests

      , sum(completed_sessions)completed_sessions
      , 1*sum(completed_sessions) / count(distinct client_uuid) as avg_completed_sessions

    --   , 1*sum(r_s_ratio) / count(distinct client_uuid) as avg_r_s_ratio
    --   , variance(r_s_ratio)var_r_s_ratio

      from india_growth.anz_xp_ssn_longterm_v2 
      group by 1,2,3,4,5

    )   

    select * from all_cohorts 
    union all 
    select * from quarter_freq 
    union all
    select * from lifetime_freq 
    union all
    select * from member 





    select 
     campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

      , count(distinct client_uuid) as cohort_users

      , sum(ft_user_ct)ft_user_ct
      , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
      , variance(ft_user_ct)var_ft_user_ct


    from 
    (
     select     
       campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

      , client_uuid
      , count(distinct case when ft_user_ct > 0 then client_uuid end )ft_user_ct

    --   , 1*count(distinct case when ft_user_ct > 0 then client_uuid end ) / count(distinct client_uuid) as avg_ft_user_ct
    --  , variance(count(distinct case when ft_user_ct > 0 then client_uuid end ))var_ft_user_ct

      from india_growth.anz_xp_res_v3 
      group by 1,2,3,4,5,6

    )a
    
    group by 1,2,3,4,5



------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------- Eats GB and trips metrics --------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

--------------------
--- Users base for different cohorts (treatments vs control )
----------------------

india_growth.anz_xp_base_v2

--------------------
---  Eats GB for the campaign 
-- https://querybuilder-ea-phx2.uberinternal.com/r/dZ0FmilCr/run/evBCb0OYj/
-- https://querybuilder-ea-phx2.uberinternal.com/r/cdyQLEz6Z/run/o4w2Kp9ox 
----------------------

-- , fds as (

--     select
--         xp.campaign_name
--         ,xp.cohort
--         ,xp.tag_name
--         ,xp.country_id

--         -- , sum(coalesce(net_billings_usd, 0)) as net_billings_usd
--         , sum(case when line_of_business = 'UberEATS' then coalesce(gross_bookings_usd, 0) end) as gb_eats
--         , sum(case when line_of_business = 'UberGROCERY' then coalesce(gross_bookings_usd, 0) end) as gb_grocery
--         , sum(case when line_of_business = 'POSTMATES' then coalesce(gross_bookings_usd, 0) end) as gb_postmates
--         -- , sum(coalesce(net_inflows_usd, 0)) as net_inflows_usd

--         from 
--             secure_finance.fds_workflow_eats_op_dt as eat
--             join xp_users as xp on eat.eater_uuid = xp.client_uuid

--         and  operational_date >=  TO_ISO8601(FROM_ISO8601_DATE('{{xp_date}}') ) 
--         and  operational_date <=  TO_ISO8601(FROM_ISO8601_DATE('{{xp_end_date}}') )    
--         and  eat.status['delivery_status'] = 'completed'  and eat.status['order_status']= 'completed'

--         group by 1,2,3,4
--         )

--------------------
--- eaters trips n GB for different verticals (treatments vs control )
----------------------

create table india_growth.anz_xp_eats_post_v2 as 

with trips_n_GB as 
        (
        select
            xp.campaign_name
            ,xp.cohort
            ,xp.tag_name
            ,xp.country_id
            ,xp.client_uuid
             ,xp.quarter_freq
             ,xp.lifetime_freq
             ,xp.member

           -- ,count(distinct xp.client_uuid) as eaters

            ,count(distinct fe.workflow_uuid) as total_completed_trips
            ,count(distinct case when dm.merchant_type_analytics in ('MERCHANT_TYPE_UNKNOWN',
                                                                        'MERCHANT_TYPE_RESTAURANT',
                                                                          'MERCHANT_TYPE_SPECIALTY_FOOD' ) then fe.workflow_uuid end ) as eats_trips
            
            -- ,count(distinct case when dm.merchant_type_analytics in ('MERCHANT_TYPE_LIQUOR' ) then fe.workflow_uuid end ) as liquor_trips

            ,count(distinct case when dm.merchant_type_analytics in ('MERCHANT_TYPE_RETAIL','MERCHANT_TYPE_ESSENTIALS',
                                                                      'MERCHANT_TYPE_GROCERY', 'MERCHANT_TYPE_LIQUOR'
                                                                         ) then fe.workflow_uuid end ) as grocery_liqor_trips

            ,sum( case when dm.merchant_type_analytics in ('MERCHANT_TYPE_UNKNOWN',
                                                                        'MERCHANT_TYPE_RESTAURANT',
                                                                          'MERCHANT_TYPE_SPECIALTY_FOOD' ) then coalesce(gross_bookings_usd, 0) end ) as eats_gb
            
            -- ,sum(  case when dm.merchant_type_analytics in ('MERCHANT_TYPE_LIQUOR' ) then coalesce(gross_bookings_usd, 0) end ) as liquor_gb

            ,sum(  case when dm.merchant_type_analytics in ('MERCHANT_TYPE_RETAIL','MERCHANT_TYPE_ESSENTIALS',
                                                                      'MERCHANT_TYPE_GROCERY', 'MERCHANT_TYPE_LIQUOR'
                                                                         ) then coalesce(gross_bookings_usd, 0) end ) as grocery_liqor_gb

        from
           india_growth.anz_xp_base_v2 as xp 
            left join eds.fact_eats_trip fe on fe.client_uuid = xp.client_uuid
            and Date(datestr) between DATE ('{{xp_date}}') and DATE '{{xp_end_date}}' + INTERVAL '20' DAY 
            and date(fe.eater_request_timestamp_utc) >= Date('{{xp_date}}')
            and is_completed = true

          JOIN eds.dim_merchant dm ON fe.restaurant_uuid = dm.uuid   --- to get eats and other verticals 
           and is_completed = true
         
         JOIN secure_finance.fds_workflow_eats_op_dt fdse
          ON fe.workflow_uuid = fdse.workflow_uuid
        --   and  operational_date >=  TO_ISO8601(FROM_ISO8601_DATE('{{xp_date}}') ) 
        --   and  operational_date <=  TO_ISO8601(FROM_ISO8601_DATE('{{xp_end_date}}' + INTERVAL '20' DAY) )

          AND DATE(fdse.operational_date) between DATE ('{{xp_date}}') AND DATE '{{xp_end_date}}' + INTERVAL '20' DAY

        group by 1,2,3,4,5,6,7,8
        )


--------------------
--- eaters firsts for different cohorts (treatments vs control )
----------------------

, eats_first_trips as 
        (
         
         select
            xp.campaign_name
            ,xp.cohort
            ,xp.tag_name
            ,xp.country_id
            ,xp.client_uuid
             ,xp.quarter_freq
             ,xp.lifetime_freq
              ,xp.member
            ,count(distinct case when ae.eater_uuid is null then fe.client_uuid end) as ft_user_ct

        from
           india_growth.anz_xp_base_v2 as xp  
           left join eds.fact_eats_trip fe on fe.client_uuid = xp.client_uuid
        and 
            Date(datestr) between DATE '{{xp_date}}' and  DATE '{{xp_end_date}}' + INTERVAL '20' DAY 
            and date(fe.eater_request_timestamp_utc) >= DATE('{{xp_end_date}}')
            --  Date(datestr) >= Date(xp.begin_effective_timestamp)
            and is_completed = true

          left join dwh.analytics_eater ae 
             on xp.client_uuid = ae.eater_uuid 
             and Date(datestr) between DATE '{{xp_date}}' and  DATE '{{xp_end_date}}' + INTERVAL '20' DAY
             and date(first_eats_trip_request_timestamp) <= DATE('{{xp_end_date}}') 

            -- where ae.eater_uuid is null 

            group by 1,2,3,4,5,6,7,8
        )

 --------------------
--- eater session and requests for different cohorts (treatments vs control )
----------------------

,eater_ssn_N_rqsts as(
    select 
    xp.campaign_name
    ,xp.cohort
    ,xp.tag_name
    ,xp.country_id
    ,xp.client_uuid
    ,xp.quarter_freq
    ,xp.lifetime_freq
    ,xp.member
    , count(distinct case when element_at(event_map, 'request') is not null
        then session_uuid end) as session_with_requests

    , count(distinct session_uuid) as sessions

    from india_growth.anz_xp_base_v2 as xp 
    left join  eds.fact_eater_app_session as fae
    on fae.user_uuid = xp.client_uuid
    and DATE(datestr) between DATE '{{xp_date}}' and DATE '{{xp_end_date}}' + INTERVAL '20' DAY 
        and device.os in ('ios', 'android')
    -- Logged in users only
    and user_uuid is not null
    and user_uuid != ''
    -- 'Valid' sessions only
    -- Based on our intuitive definition of what a valid session means
    -- This definition might change as we get a clearer understanding of 
    -- what constitutes a valid session and how to track that
    and (element_at(event_map, 'view_marketplace') is not null
        or element_at(event_map, 'view_store') is not null
        or element_at(event_map, 'search') is not null
        or element_at(event_map, 'view_search') is not null
        or element_at(event_map, 'view_store_item') is not null
        or element_at(event_map, 'view_checkout') is not null
        or element_at(event_map, 'add_store_item_to_cart') is not null
        or element_at(event_map, 'request') is not null
        or element_at(event_map, 'succeed_order_estimate') is not null
        or element_at(event_map, 'succeed_request') is not null
        )
        group by 1,2,3,4,5,6,7,8
    )       

--------------------
--- eater completed session for different cohorts (treatments vs control )
----------------------

,eater_cmpltd_app as(
    select 
    xp.campaign_name
    ,xp.cohort
    ,xp.tag_name
    ,xp.country_id
    ,xp.client_uuid
     ,xp.quarter_freq
    ,xp.lifetime_freq
    ,xp.member
    , count(distinct trip.session_uuid) as compltd_ssn_eats

    from 
      india_growth.anz_xp_base_v2 as xp  
      left join 
        (select distinct  
            device.os as device_os
            , user_uuid
            , session_uuid 
            , workflow_uuid
        from eds.fact_eater_app_session
        CROSS JOIN UNNEST(workflow_uuids) AS t (workflow_uuid)
        where 1=1 
            and DATE(datestr) between DATE '{{xp_date}}' and DATE '{{xp_end_date}}' + INTERVAL '20' DAY
            and device.os in ('ios', 'android') 
          ) as app
        on app.user_uuid = xp.client_uuid 

     join eds.fact_eats_trip as trip
     on app.workflow_uuid = trip.workflow_uuid
     and app.user_uuid = trip.client_uuid
     and is_completed = true  -- if both order + delivery gets completed
     and Date(trip.datestr) between DATE '{{xp_date}}' and DATE '{{xp_end_date}}' + INTERVAL '20' DAY 
    -- Logged in users only
    and user_uuid is not null
    and user_uuid != ''

        group by 1,2,3,4,5,6,7,8
    )      

--------------------
--- combining all metrics for different cohorts (treatments vs control )
----------------------

, expt_metrics_eats as 

     (         
      select 
         xp.campaign_name
        , xp.cohort
        , xp.tag_name
        , xp.country_id
        , xp.client_uuid
        , xp.quarter_freq
        ,xp.lifetime_freq
        ,xp.member

     --   , xp.users as cohort_users
        , (case when rt.total_completed_trips >= 1 then 1 else 0 end) as eaters 
        , coalesce(rt.total_completed_trips,0)completed_trips

        , coalesce(rt.eats_trips,0)eats_trips
        , coalesce(rt.grocery_liqor_trips,0)grocery_liquor_trips

        , coalesce(rt.eats_gb,0)eats_gb
        , coalesce(rt.grocery_liqor_gb,0)grocery_liquor_gb

        , eft.ft_user_ct
        
        , coalesce(ssn.session_with_requests,0)requests
        , coalesce(ssn.sessions,0)sessions
        , coalesce(cmpl.compltd_ssn_eats,0)compltd_ssn_eats
    --    , coalesce(ssn.session_with_requests/ssn.sessions ,0)r_s_eats

       from  india_growth.anz_xp_base_v2 as xp 

       left join trips_n_GB as rt 
       on xp.client_uuid = rt.client_uuid and xp.campaign_name = rt.campaign_name and xp.cohort = rt.cohort and xp.country_id = rt.country_id

       left join eats_first_trips eft 
       on xp.client_uuid = eft.client_uuid and xp.campaign_name = eft.campaign_name and xp.cohort = eft.cohort and xp.country_id = eft.country_id

    --    left join fds as fds 
    --    on xp.campaign_name = fds.campaign_name and xp.cohort = fds.cohort and xp.country_id = sr.country_id

       left join eater_ssn_N_rqsts as ssn
       on xp.client_uuid = ssn.client_uuid and xp.campaign_name = ssn.campaign_name and xp.cohort = ssn.cohort and xp.country_id = ssn.country_id

       left join eater_cmpltd_app as cmpl 
       on xp.client_uuid = cmpl.client_uuid and xp.campaign_name = cmpl.campaign_name and xp.cohort = cmpl.cohort and xp.country_id = cmpl.country_id

     )
   
   select * from expt_metrics_eats



 --934531   

 with all_cohorts as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

       , count(distinct client_uuid) as cohort_users

      , sum(eaters)eaters
      , 1*sum(eaters) / count(distinct client_uuid) as avg_eaters
      , variance(eaters)var_eaters

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

      , sum(ft_user_ct)ft_user_ct
      , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
      , variance(ft_user_ct)var_ft_user_ct

      , sum(eats_gb)eats_gb
      , 1*sum(eats_gb) / count(distinct client_uuid) as avg_eats_gb
      , variance(eats_gb)var_eats_gb

      , sum(grocery_liquor_gb)grocery_liquor_gb
      , 1*sum(grocery_liquor_gb) / count(distinct client_uuid) as avg_grocery_liquor_gb
      , variance(grocery_liquor_gb)var_grocery_liquor_gb

      , sum(eats_trips)eats_trips
      , 1*sum(eats_trips) / count(distinct client_uuid) as avg_eats_trips
      , variance(eats_trips)var_eats_trips

      , sum(grocery_liquor_trips)grocery_liquor_trips
      , 1*sum(grocery_liquor_trips) / count(distinct client_uuid) as avg_grocery_liquor_trips
      , variance(grocery_liquor_trips)var_grocery_liquor_trips

      , sum(requests)requests
      , variance(grocery_liquor_trips)var_requests

      , sum(sessions)sessions
      , variance(sessions)var_sessions
      
      , sum(compltd_ssn_eats)compltd_ssn_eats 
      , variance(compltd_ssn_eats)var_compltd_ssn_eats

      from india_growth.anz_xp_eats_post_v2
      group by 1,2,3,4,5

    )

 ,quarter_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , quarter_freq as segment

      , count(distinct client_uuid) as cohort_users

      , sum(eaters)eaters
      , 1*sum(eaters) / count(distinct client_uuid) as avg_eaters
      , variance(eaters)var_eaters

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

      , sum(ft_user_ct)ft_user_ct
      , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
      , variance(ft_user_ct)var_ft_user_ct

      , sum(eats_gb)eats_gb
      , 1*sum(eats_gb) / count(distinct client_uuid) as avg_eats_gb
      , variance(eats_gb)var_eats_gb

      , sum(grocery_liquor_gb)grocery_liquor_gb
      , 1*sum(grocery_liquor_gb) / count(distinct client_uuid) as avg_grocery_liquor_gb
      , variance(grocery_liquor_gb)var_grocery_liquor_gb

      , sum(eats_trips)eats_trips
      , 1*sum(eats_trips) / count(distinct client_uuid) as avg_eats_trips
      , variance(eats_trips)var_eats_trips

      , sum(grocery_liquor_trips)grocery_liquor_trips
      , 1*sum(grocery_liquor_trips) / count(distinct client_uuid) as avg_grocery_liquor_trips
      , variance(grocery_liquor_trips)var_grocery_liquor_trips

      , sum(requests)requests
      , variance(grocery_liquor_trips)var_requests

      , sum(sessions)sessions
      , variance(sessions)var_sessions
      
      , sum(compltd_ssn_eats)compltd_ssn_eats 
      , variance(compltd_ssn_eats)var_compltd_ssn_eats

      from india_growth.anz_xp_eats_post_v2
      group by 1,2,3,4,5

    )
 
 ,lifetime_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , lifetime_freq as segment

       , count(distinct client_uuid) as cohort_users

      , sum(eaters)eaters
      , 1*sum(eaters) / count(distinct client_uuid) as avg_eaters
      , variance(eaters)var_eaters

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

      , sum(ft_user_ct)ft_user_ct
      , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
      , variance(ft_user_ct)var_ft_user_ct

      , sum(eats_gb)eats_gb
      , 1*sum(eats_gb) / count(distinct client_uuid) as avg_eats_gb
      , variance(eats_gb)var_eats_gb

      , sum(grocery_liquor_gb)grocery_liquor_gb
      , 1*sum(grocery_liquor_gb) / count(distinct client_uuid) as avg_grocery_liquor_gb
      , variance(grocery_liquor_gb)var_grocery_liquor_gb

      , sum(eats_trips)eats_trips
      , 1*sum(eats_trips) / count(distinct client_uuid) as avg_eats_trips
      , variance(eats_trips)var_eats_trips

      , sum(grocery_liquor_trips)grocery_liquor_trips
      , 1*sum(grocery_liquor_trips) / count(distinct client_uuid) as avg_grocery_liquor_trips
      , variance(grocery_liquor_trips)var_grocery_liquor_trips

      , sum(requests)requests
      , variance(grocery_liquor_trips)var_requests

      , sum(sessions)sessions
      , variance(sessions)var_sessions
      
      , sum(compltd_ssn_eats)compltd_ssn_eats 
      , variance(compltd_ssn_eats)var_compltd_ssn_eats

      from india_growth.anz_xp_eats_post_v2
      group by 1,2,3,4,5

    )

 ,member as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , member as segment

       , count(distinct client_uuid) as cohort_users

      , sum(eaters)eaters
      , 1*sum(eaters) / count(distinct client_uuid) as avg_eaters
      , variance(eaters)var_eaters

      , sum(completed_trips)completed_trips
      , 1*sum(completed_trips) / count(distinct client_uuid) as avg_completed_trips
      , variance(completed_trips)var_completed_trips

      , sum(ft_user_ct)ft_user_ct
      , 1*sum(ft_user_ct) / count(distinct client_uuid) as avg_ft_user_ct
      , variance(ft_user_ct)var_ft_user_ct

      , sum(eats_gb)eats_gb
      , 1*sum(eats_gb) / count(distinct client_uuid) as avg_eats_gb
      , variance(eats_gb)var_eats_gb

      , sum(grocery_liquor_gb)grocery_liquor_gb
      , 1*sum(grocery_liquor_gb) / count(distinct client_uuid) as avg_grocery_liquor_gb
      , variance(grocery_liquor_gb)var_grocery_liquor_gb

      , sum(eats_trips)eats_trips
      , 1*sum(eats_trips) / count(distinct client_uuid) as avg_eats_trips
      , variance(eats_trips)var_eats_trips

      , sum(grocery_liquor_trips)grocery_liquor_trips
      , 1*sum(grocery_liquor_trips) / count(distinct client_uuid) as avg_grocery_liquor_trips
      , variance(grocery_liquor_trips)var_grocery_liquor_trips

      , sum(requests)requests
      , variance(grocery_liquor_trips)var_requests

      , sum(sessions)sessions
      , variance(sessions)var_sessions
      
      , sum(compltd_ssn_eats)compltd_ssn_eats 
      , variance(compltd_ssn_eats)var_compltd_ssn_eats

      from india_growth.anz_xp_eats_post_v2
      group by 1,2,3,4,5

    )


    select * from all_cohorts 
    union all 
    select * from quarter_freq 
    union all
    select * from lifetime_freq 
    union all
    select * from member 




------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------- Overall level code  ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------



create table india_growth.anz_xp_overall_longterm_v2 as
 select a.* 
        ,b.shopping_sessions
        ,b.requests
        ,b.completed_sessions

        ,c.eaters
        ,c.completed_trips as eats_completed_trips
        ,c.eats_trips
        ,c.grocery_liquor_trips
        ,c.eats_gb
        ,c.grocery_liquor_gb
        ,c.requests as eats_requests
        ,c.sessions as eats_sessions
        ,c.compltd_ssn_eats as eats_completed_session

  
   from india_growth.anz_xp_longterm_v3 as a 
   
    left join india_growth.anz_xp_ssn_longterm_v2 as b 
     on a.client_uuid = b.client_uuid and a.campaign_name = b.campaign_name and a.cohort = b.cohort  and a.country_id = b.country_id
     
     left join india_growth.anz_xp_eats_post_v2 as c 
      on a.client_uuid = c.client_uuid and a.campaign_name = c.campaign_name and a.cohort = c.cohort  and a.country_id = c.country_id
      
-- 934531    
     

------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------- T test for overall metrics  ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------


     select a.*
         , (gb + eats_gb + grocery_liquor_gb )overall_gb
        , (completed_trips + eats_trips + grocery_liquor_trips )overall_trips
        , (promo_spend)promo_spend 
        , (gb + eats_gb + grocery_liquor_gb - promo_spend )adjusted_gb

      from india_growth.anz_xp_overall_longterm_v2 as a





------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------- Aggregated code  ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------

with all_cohorts as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , '1 all cohorts' as segment

      , count(distinct client_uuid) as cohort_users

      , sum(gb + eats_gb + grocery_liquor_gb )overall_gb
      , sum(completed_trips + eats_trips + grocery_liquor_trips )overall_trips
      , sum(promo_spend)promo_spend


      from india_growth.anz_xp_overall_longterm_v2 
      group by 1,2,3,4,5

    )

 ,quarter_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , quarter_freq as segment

      , count(distinct client_uuid) as cohort_users

      , sum(gb + eats_gb + grocery_liquor_gb )overall_gb
      , sum(completed_trips + eats_trips + grocery_liquor_trips )overall_trips
      , sum(promo_spend)promo_spend

      from india_growth.anz_xp_overall_longterm_v2 
      group by 1,2,3,4,5

    )
 
 ,lifetime_freq as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , lifetime_freq as segment

      , count(distinct client_uuid) as cohort_users

      , sum(gb + eats_gb + grocery_liquor_gb )overall_gb
      , sum(completed_trips + eats_trips + grocery_liquor_trips )overall_trips
      , sum(promo_spend)promo_spend

      from india_growth.anz_xp_overall_longterm_v2 
      group by 1,2,3,4,5

    )

 ,member as
    (        
     select 
      
       campaign_name
      , cohort
      , tag_name
      , country_id
      , member as segment

      , count(distinct client_uuid) as cohort_users

      , sum(gb + eats_gb + grocery_liquor_gb )overall_gb
      , sum(completed_trips + eats_trips + grocery_liquor_trips )overall_trips
      , sum(promo_spend)promo_spend

      from india_growth.anz_xp_overall_longterm_v2 
      group by 1,2,3,4,5

    )   

    select * from all_cohorts 
    union all 
    select * from quarter_freq 
    union all
    select * from lifetime_freq 
    union all
    select * from member 





------------------------------------------------------------------------------------------------------------------------------------------------
------------- Combining rides GB and Trips with rides Session and Eats session and GB data for T test  -------------
------------------------------------------------------------------------------------------------------------------------------------------------

india_growth.anz_xp_res_v3   -- 934531
india_growth.anz_xp_ssn_v1   -- 934531
india_growth.anz_xp_eats_v1  -- 934531



create table india_growth.AnZ_Xp_overall_longterm_metrics as 
select  a.campaign_name
       , a.cohort
       , a.tag_name
       , a.country_id
       , a.client_uuid
       , a.quarter_freq
       , a.lifetime_freq
       , a.member
       , riders
       , a.completed_trips
       , (case when a.ft_user_ct > 0 then 1 else 0 end) as ft_user_ct
       , gb
       , vc_gb
       , promo_spend
       , (gb - promo_spend)adjusted_gb
       , pass_purchased_user_ct
       
       , b.shopping_sessions
       , b.requests
       , b.completed_sessions
       
       , (case when eats_trips >= 1 then 1 else 0 end) as eaters 
       , eats_trips
       , eats_gb
       
       , (case when grocery_liquor_trips >= 1 then 1 else 0 end) as active_delivery 
       , grocery_liquor_trips
       , grocery_liquor_gb
       
       , c.requests as eats_request
       , c.sessions as eats_sessions
       , compltd_ssn_eats as eats_completed_sessions


from 
india_growth.anz_xp_longterm_v3 as a 
left join india_growth.anz_xp_ssn_longterm_v2 as b 
 on a.client_uuid = b.client_uuid and a.cohort = b.cohort and a.country_id = b.country_id
 
left join india_growth.anz_xp_eats_post_v2 as c
on a.client_uuid = c.client_uuid and a.cohort = c.cohort and a.country_id = c.country_id





